{"version":3,"sources":["Components/Header/Header.jsx","Components/Cell/Cell.jsx","Components/Gameboard/Gameboard.jsx","Components/Gameboard/Gameboard.container.jsx","App.js","reportWebVitals.js","index.js"],"names":["className","rowIndex","columnIndex","isAlive","id","style","backgroundColor","cellMatrix","map","row","cell","GameboardContainer","useState","Array","fill","x","setCellMatrix","useEffect","i","interval","setInterval","newCellMatrix","Math","floor","random","clearInterval","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAGe,G,YAAA,kBACX,mCACI,uDACA,qBAAKA,UAAU,cAAf,SACI,8BACI,+BACI,6BAAI,4CACJ,6BAAI,6CACJ,6BAAI,yD,OCRT,G,MAAA,gBAAGC,EAAH,EAAGA,SAAUC,EAAb,EAAaA,YAAaC,EAA1B,EAA0BA,QAA1B,OACX,qBAAKH,UAAU,OAAOI,GAAE,eAAUH,EAAV,YAAsBC,GAAeG,MAAO,CAChEC,gBAAiBH,EAAU,YAAc,sBCDlC,G,MAAA,gBAAGI,EAAH,EAAGA,WAAH,OACX,qBAAKH,GAAG,YAAR,SACMG,EACEA,EAAWC,KAAK,SAACC,EAAKR,GAAN,OACZQ,EAAID,KAAK,SAACE,EAAMR,GAAP,OACL,cAAC,EAAD,CAAMA,YAAaA,EAAaD,SAAUA,EAAUE,QAASO,UAGrE,iCCTCC,EAAqB,WAAO,IAAD,EACEC,mBAClCC,MAAM,IAAIC,OAAON,KAAI,SAAAO,GAAC,OAAIF,MAAM,IAAIC,MAAK,OAFT,mBAC5BP,EAD4B,KAChBS,EADgB,KAMpCC,qBAAW,kBACPD,EAAcH,MAAM,IAAIC,OAAON,KAAI,SAACO,EAAEG,GAAH,OAASL,MAAM,IAAIC,MAAK,SAC9D,IAGDG,qBAAU,WACN,IAAME,EAAWC,aAAa,WAC1B,IAAIC,EAAgBR,MAAM,IAAIC,OAAON,KAAI,SAACO,EAAEG,GAAH,OAASX,EAAWW,MAC7DG,EACKC,KAAKC,MAAsB,GAAhBD,KAAKE,WAChBF,KAAKC,MAAsB,GAAhBD,KAAKE,YACnB,EACFR,EAAcK,KACf,KACH,OAAO,kBAAMI,cAAcN,MAC5B,IAQH,OAAO,cAAC,EAAD,CAAWZ,WAAYA,KC5BnB,G,MAAA,WACb,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SCIS0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.00586680.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nexport default () =>\r\n    <header>\r\n        <h1>Conway's Game of Life</h1>\r\n        <div className=\"nav-wrapper\">\r\n            <nav>\r\n                <ul>\r\n                    <li><button>play</button></li>\r\n                    <li><button>pause</button></li>\r\n                    <li><button>reset</button></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </header>","import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nexport default ({ rowIndex, columnIndex, isAlive }) =>\r\n    <div className=\"cell\" id={`cell-${rowIndex}-${columnIndex}`} style={{\r\n        backgroundColor: isAlive ? \"lightgray\" : \"lightslategray\"\r\n    }} />","import React from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport \"./Gameboard.css\";\r\n\r\nexport default ({ cellMatrix }) =>\r\n    <div id=\"gameboard\">\r\n        { cellMatrix ?\r\n            cellMatrix.map( (row, rowIndex) =>\r\n                row.map( (cell, columnIndex) =>\r\n                    <Cell columnIndex={columnIndex} rowIndex={rowIndex} isAlive={cell} />\r\n            ))\r\n            :\r\n            <></>\r\n        }\r\n    </div>","import React, { useState, useEffect } from \"react\";\r\nimport Gameboard from \"./Gameboard\";\r\n\r\nexport const GameboardContainer = () => {\r\n    const [ cellMatrix, setCellMatrix ] = useState(\r\n        Array(50).fill().map(x => Array(50).fill(false))\r\n    );\r\n    \r\n    // set initial state of cellMatrix\r\n    useEffect( () =>\r\n        setCellMatrix(Array(50).fill().map((x,i) => Array(50).fill(false)))\r\n    ,[]);\r\n    \r\n    // update cellMatrix\r\n    useEffect(() => {\r\n        const interval = setInterval( () => {\r\n            let newCellMatrix = Array(50).fill().map((x,i) => cellMatrix[i]);\r\n            newCellMatrix\r\n                [Math.floor(Math.random() * 50)]\r\n                [Math.floor(Math.random() * 50)]\r\n            = true;\r\n            setCellMatrix(newCellMatrix);\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const willSurvive = (rowIndex, columnIndex) => {\r\n        \r\n    }\r\n\r\n    \r\n\r\n    return <Gameboard cellMatrix={cellMatrix} />;\r\n}","import Header from \"./Components/Header/Header\";\nimport { GameboardContainer as Gameboard } from \"./Components/Gameboard/Gameboard.container\";\nimport \"./App.css\";\n\nexport default () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Gameboard />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}