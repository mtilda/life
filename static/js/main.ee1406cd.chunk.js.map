{"version":3,"sources":["Components/Header/Header.jsx","Components/Cell/Cell.jsx","Components/Gameboard/Gameboard.jsx","Components/Gameboard/Gameboard.container.jsx","App.js","reportWebVitals.js","index.js"],"names":["className","row","column","isAlive","id","style","backgroundColor","cellMatrix","matrixSize","gridTemplateColumns","repeat","gridTemplateRows","map","rowIndex","cell","columnIndex","GameboardContainer","useState","Array","fill","x","setCellMatrix","useEffect","newCellMatrix","i","push","j","Math","random","interval","setInterval","length","willSurvive","clearInterval","mod","n","m","getCell","modRow","modColumn","neighborCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ee1406cd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nexport default () =>\r\n    <header>\r\n        <h1>Conway's Game of Life</h1>\r\n        <div className=\"nav-wrapper\">\r\n            <nav>\r\n                <ul>\r\n                    <li><button>play</button></li>\r\n                    <li><button>pause</button></li>\r\n                    <li><button>reset</button></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </header>","import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nexport default ({ row, column, isAlive }) =>\r\n    <div className=\"cell\" id={`cell-${row}-${column}`} style={{\r\n        backgroundColor: typeof isAlive === \"undefined\" ? \"red\" : isAlive ? \"lightgray\" : \"lightslategray\"\r\n    }} />","import React from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport \"./Gameboard.css\";\r\n\r\nexport default ({ cellMatrix, matrixSize }) =>\r\n    <div\r\n        id=\"gameboard\"\r\n        style={{gridTemplateColumns: \"1fr\".repeat(matrixSize), gridTemplateRows: \"1fr\".repeat(matrixSize)}}\r\n    >\r\n        { cellMatrix ?\r\n            cellMatrix.map( (row, rowIndex) =>\r\n                row.map( (cell, columnIndex) =>\r\n                    <Cell column={columnIndex} row={rowIndex} isAlive={cell} />\r\n            ))\r\n            :\r\n            <></>\r\n        }\r\n    </div>","import React, { useState, useEffect } from \"react\";\r\nimport Gameboard from \"./Gameboard\";\r\n\r\nexport const GameboardContainer = ({ matrixSize }) => {\r\n    const [ cellMatrix, setCellMatrix ] = useState(\r\n        Array(matrixSize).fill().map(x => Array(matrixSize).fill(false))\r\n    );\r\n    \r\n    // set initial state of cellMatrix\r\n    useEffect( () => {\r\n        const newCellMatrix = [];\r\n        for ( let i = 0; i < matrixSize; i++ ) {\r\n            newCellMatrix.push([]);\r\n            for ( let j = 0; j < matrixSize; j++ ) {\r\n                // newCellMatrix[i][j] = Math.random() * Math.round(Math.pow(i-32,2)+Math.pow(j-32,2)) < 2;\r\n                newCellMatrix[i][j] = Math.random() < 0.1;\r\n            }\r\n        }\r\n        setCellMatrix(newCellMatrix);\r\n    }\r\n    ,[]);\r\n    \r\n    // update cellMatrix\r\n    useEffect(() => {\r\n        const interval = setInterval( () => {\r\n            const newCellMatrix = [];\r\n\r\n            for ( let i = 0; i < cellMatrix.length ; i++ ) {\r\n                newCellMatrix.push([]);\r\n                for ( let j = 0; j < cellMatrix[i].length; j++ ) {\r\n                    newCellMatrix[i].push(willSurvive(i,j));\r\n                }\r\n            }\r\n\r\n            setCellMatrix(newCellMatrix);\r\n        }, 0);\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    const mod = (n, m) => {\r\n        return ((n % m) + m) % m;\r\n    }\r\n\r\n    // get the state of a specified cell\r\n    const getCell = (row,column) => {\r\n        // no wrap\r\n        // return cellMatrix[row] && cellMatrix[row][column] || false;\r\n\r\n        // toroidal\r\n        let modRow = mod(row, cellMatrix.length);\r\n        let modColumn = mod(column, cellMatrix[modRow].length);\r\n        return cellMatrix[modRow][modColumn];\r\n    }\r\n\r\n    // will this cell survive this round?\r\n    const willSurvive = (row, column) => {\r\n        // count this cell's neightbors\r\n        let neighborCount = 0;\r\n        if (getCell(row - 1, column - 1))   neighborCount++;\r\n        if (getCell(row - 1, column))       neighborCount++;\r\n        if (getCell(row - 1, column + 1))   neighborCount++;\r\n        if (getCell(row, column - 1))       neighborCount++;\r\n        if (getCell(row, column + 1))       neighborCount++;\r\n        if (getCell(row + 1, column - 1))   neighborCount++;\r\n        if (getCell(row + 1, column))       neighborCount++;\r\n        if (getCell(row + 1, column + 1))   neighborCount++;\r\n        \r\n        // if this cell is alive\r\n        if (cellMatrix[row][column]) {\r\n            // starvation\r\n            if (neighborCount < 2) {\r\n                return false;\r\n            }\r\n            // stasis\r\n            else if (neighborCount === 2 || neighborCount === 3) {\r\n                return true;\r\n            }\r\n            // overpopulation\r\n            else if (neighborCount > 3) {\r\n                return false;\r\n            }\r\n        }\r\n        // reproduction\r\n        else if (neighborCount === 3) {\r\n            return true;\r\n        }\r\n        else return false;\r\n    }\r\n\r\n    return <Gameboard cellMatrix={cellMatrix} />;\r\n}","import Header from \"./Components/Header/Header\";\nimport { GameboardContainer as Gameboard } from \"./Components/Gameboard/Gameboard.container\";\nimport \"./App.css\";\n\nexport default () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Gameboard matrixSize={64} />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}