{"version":3,"sources":["Components/Header/Header.jsx","Components/Cell/Cell.jsx","Components/Gameboard/Gameboard.jsx","Components/Gameboard/Gameboard.container.jsx","App.js","reportWebVitals.js","index.js"],"names":["play","handlePlay","handlePause","handleReset","className","onClick","row","column","isAlive","id","style","backgroundColor","cellMatrix","matrixSize","gridTemplateColumns","gridTemplateRows","map","rowIndex","cell","columnIndex","GameboardContainer","reset","dismissReset","useState","Array","fill","x","setCellMatrix","useEffect","seedMatrix","interval","setInterval","newCellMatrix","i","length","push","j","willSurvive","clearInterval","Math","random","mod","n","m","getCell","modRow","modColumn","neighborCount","setPlay","setReset","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5ab42b0a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nexport default ({ play, handlePlay, handlePause, handleReset }) =>\r\n    <header>\r\n        <h1>Conway's Game of Life</h1>\r\n        <div className=\"nav-wrapper\">\r\n            <nav>\r\n                <ul>\r\n                    <li><button onClick={handlePlay} className={`${play ? \"play\" : \"\"}`}>play</button></li>\r\n                    <li><button onClick={handlePause}>pause</button></li>\r\n                    <li><button onClick={handleReset}>reset</button></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </header>","import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nexport default ({ row, column, isAlive }) =>\r\n    <div className=\"cell\" id={`cell-${row}-${column}`} style={{\r\n        backgroundColor: typeof isAlive === \"undefined\" ? \"red\" : isAlive ? \"lightgray\" : \"lightslategray\"\r\n    }} />","import React from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport \"./Gameboard.css\";\r\n\r\nexport default ({ cellMatrix, matrixSize }) =>\r\n    <div\r\n        id=\"gameboard\"\r\n        style={{\r\n            gridTemplateColumns: `repeat(${matrixSize},1fr)`,\r\n            gridTemplateRows: `repeat(${matrixSize},1fr)`\r\n        }}\r\n    >\r\n        { cellMatrix ?\r\n            cellMatrix.map( (row, rowIndex) =>\r\n                row.map( (cell, columnIndex) =>\r\n                    <Cell column={columnIndex} row={rowIndex} isAlive={cell} />\r\n            ))\r\n            :\r\n            <></>\r\n        }\r\n    </div>","import React, { useState, useEffect } from \"react\";\r\nimport Gameboard from \"./Gameboard\";\r\n\r\nexport const GameboardContainer = ({ matrixSize, play, reset, dismissReset }) => {\r\n    const [ cellMatrix, setCellMatrix ] = useState(\r\n        Array(matrixSize).fill().map(x => Array(matrixSize).fill(false))\r\n    );\r\n    \r\n    // handle reset\r\n    useEffect( () => {\r\n        if (reset) {\r\n            seedMatrix();\r\n            dismissReset();\r\n        }\r\n    }\r\n    ,[reset]);\r\n    \r\n    // update cellMatrix\r\n    useEffect(() => {\r\n        const interval = setInterval( () => {\r\n            if (play) {\r\n                const newCellMatrix = [];\r\n\r\n                for ( let i = 0; i < cellMatrix.length ; i++ ) {\r\n                    newCellMatrix.push([]);\r\n                    for ( let j = 0; j < cellMatrix[i].length; j++ ) {\r\n                        newCellMatrix[i].push(willSurvive(i,j));\r\n                    }\r\n                }\r\n\r\n                setCellMatrix(newCellMatrix);\r\n            }\r\n        }, 50);\r\n        return () => clearInterval(interval);\r\n    });\r\n    \r\n    // set initial state of cellMatrix\r\n    const seedMatrix = () => {\r\n        const newCellMatrix = [];\r\n        for ( let i = 0; i < matrixSize; i++ ) {\r\n            newCellMatrix.push([]);\r\n            for ( let j = 0; j < matrixSize; j++ ) {\r\n                newCellMatrix[i][j] = Math.random() < 0.1;\r\n                // newCellMatrix[i][j] = Math.pow(Math.random(),2) * Math.round(Math.pow(i-matrixSize/2,2)+Math.pow(j-matrixSize/2,2)) < 5;\r\n                // newCellMatrix[i][j] = Math.round(Math.sqrt(Math.pow(i-matrixSize/2,2)+Math.pow(j-matrixSize/2,2))) % 5 === 0;\r\n                // newCellMatrix[i][j] = i*j%6 === 0;\r\n            }\r\n        }\r\n        setCellMatrix(newCellMatrix);\r\n    }\r\n\r\n    const mod = (n, m) => {\r\n        return ((n % m) + m) % m;\r\n    }\r\n\r\n    // get the state of a specified cell\r\n    const getCell = (row,column) => {\r\n        // no wrap\r\n        // return cellMatrix[row] && cellMatrix[row][column] || false;\r\n\r\n        // toroidal\r\n        let modRow = mod(row, cellMatrix.length);\r\n        let modColumn = mod(column, cellMatrix[modRow].length);\r\n        return cellMatrix[modRow][modColumn];\r\n    }\r\n\r\n    // will this cell survive this round?\r\n    const willSurvive = (row, column) => {\r\n        // count this cell's neightbors\r\n        let neighborCount = 0;\r\n        if (getCell(row - 1, column - 1))   neighborCount++;\r\n        if (getCell(row - 1, column))       neighborCount++;\r\n        if (getCell(row - 1, column + 1))   neighborCount++;\r\n        if (getCell(row, column - 1))       neighborCount++;\r\n        if (getCell(row, column + 1))       neighborCount++;\r\n        if (getCell(row + 1, column - 1))   neighborCount++;\r\n        if (getCell(row + 1, column))       neighborCount++;\r\n        if (getCell(row + 1, column + 1))   neighborCount++;\r\n        \r\n        // if this cell is alive\r\n        if (cellMatrix[row][column]) {\r\n            // starvation\r\n            if (neighborCount < 2) {\r\n                return false;\r\n            }\r\n            // stasis\r\n            else if (neighborCount === 2 || neighborCount === 3) {\r\n                return true;\r\n            }\r\n            // overpopulation\r\n            else if (neighborCount > 3) {\r\n                return false;\r\n            }\r\n        }\r\n        // reproduction\r\n        else if (neighborCount === 3) {\r\n            return true;\r\n        }\r\n        else return false;\r\n    }\r\n\r\n    return <Gameboard cellMatrix={cellMatrix} matrixSize={matrixSize}/>;\r\n}","import react, { useState } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport { GameboardContainer as Gameboard } from \"./Components/Gameboard/Gameboard.container\";\nimport \"./App.css\";\n\nexport default () => {\n  const [play, setPlay] = useState(true);\n  const [reset, setReset] = useState(true);\n\n  const handlePlay = () => {\n    setPlay(true);\n  }\n  \n  const handlePause = () => {\n    setPlay(false);\n  }\n\n  const handleReset = () => {\n    setReset(true);\n  }\n\n  const dismissReset = () => {\n    setReset(false);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header play={play} handlePlay={handlePlay} handlePause={handlePause} handleReset={handleReset} />\n      <Gameboard matrixSize={128} play={play} reset={reset} dismissReset={dismissReset} />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}