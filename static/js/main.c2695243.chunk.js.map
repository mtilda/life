{"version":3,"sources":["Components/Header/Header.jsx","Components/Cell/Cell.jsx","Components/Gameboard/Gameboard.jsx","Components/Gameboard/Gameboard.container.jsx","App.js","reportWebVitals.js","index.js"],"names":["className","row","column","isAlive","id","style","backgroundColor","cellMatrix","map","rowIndex","cell","columnIndex","GameboardContainer","useState","Array","fill","x","setCellMatrix","useEffect","newCellMatrix","i","length","j","Math","random","interval","setInterval","willSurvive","clearInterval","mod","n","m","getCell","modRow","modColumn","neighborCount","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8PAGe,G,YAAA,kBACX,mCACI,uDACA,qBAAKA,UAAU,cAAf,SACI,8BACI,+BACI,6BAAI,4CACJ,6BAAI,6CACJ,6BAAI,yD,OCRT,G,MAAA,gBAAGC,EAAH,EAAGA,IAAKC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,QAAhB,OACX,qBAAKH,UAAU,OAAOI,GAAE,eAAUH,EAAV,YAAiBC,GAAUG,MAAO,CACtDC,gBAAiBH,EAAU,YAAc,sBCDlC,G,MAAA,gBAAGI,EAAH,EAAGA,WAAH,OACX,qBAAKH,GAAG,YAAR,SACMG,EACEA,EAAWC,KAAK,SAACP,EAAKQ,GAAN,OACZR,EAAIO,KAAK,SAACE,EAAMC,GAAP,OACL,cAAC,EAAD,CAAMT,OAAQS,EAAaV,IAAKQ,EAAUN,QAASO,UAG3D,iCCTCE,EAAqB,WAAO,IAAD,EACEC,mBAClCC,MAAM,IAAIC,OAAOP,KAAI,SAAAQ,GAAC,OAAIF,MAAM,IAAIC,MAAK,OAFT,mBAC5BR,EAD4B,KAChBU,EADgB,KAMpCC,qBAAW,WAEP,IADA,IAAIC,EAAgBL,MAAM,IAAIC,OAAOP,KAAI,SAACQ,EAAEI,GAAH,OAASb,EAAWa,MACnDA,EAAI,EAAGA,EAAIb,EAAWc,OAASD,IACrC,IAAM,IAAIE,EAAI,EAAGA,EAAIf,EAAWa,GAAGC,OAAQC,IACvCH,EAAcC,GAAGE,GAAKC,KAAKC,SAAW,MAIjD,IAGDN,qBAAU,WACN,IAAMO,EAAWC,aAAa,WAE1B,IADA,IAAIP,EAAgBL,MAAM,IAAIC,OAAOP,KAAI,SAACQ,EAAEI,GAAH,OAASb,EAAWa,MACnDA,EAAI,EAAGA,EAAIb,EAAWc,OAASD,IACrC,IAAM,IAAIE,EAAI,EAAGA,EAAIf,EAAWa,GAAGC,OAAQC,IACvCH,EAAcC,GAAGE,GAAKK,EAAYP,EAAEE,GAG5CL,EAAcE,KACf,KACH,OAAO,kBAAMS,cAAcH,MAC5B,IAEH,IAAMI,EAAM,SAACC,EAAGC,GACZ,OAASD,EAAIC,EAAKA,GAAKA,GAIrBC,EAAU,SAAC/B,EAAIC,GAKjB,IAAI+B,EAASJ,EAAI5B,EAAKM,EAAWc,QAC7Ba,EAAYL,EAAI3B,EAAQK,EAAW0B,GAAQZ,QAC/C,OAAOd,EAAW0B,GAAQC,IAIxBP,EAAc,SAAC1B,EAAKC,GAEtB,IAAIiC,EAAgB,EAWpB,GAVIH,EAAQ/B,EAAM,EAAGC,EAAS,IAAIiC,IAC9BH,EAAQ/B,EAAM,EAAGC,IAASiC,IAC1BH,EAAQ/B,EAAM,EAAGC,EAAS,IAAIiC,IAC9BH,EAAQ/B,EAAKC,EAAS,IAAIiC,IAC1BH,EAAQ/B,EAAKC,EAAS,IAAIiC,IAC1BH,EAAQ/B,EAAM,EAAGC,EAAS,IAAIiC,IAC9BH,EAAQ/B,EAAM,EAAGC,IAASiC,IAC1BH,EAAQ/B,EAAM,EAAGC,EAAS,IAAIiC,IAG9B5B,EAAWN,GAAKC,GAAS,CAEzB,GAAIiC,EAAgB,EAChB,OAAO,EAGN,GAAsB,IAAlBA,GAAyC,IAAlBA,EAC5B,OAAO,EAGN,GAAIA,EAAgB,EACrB,OAAO,OAIV,GAAsB,IAAlBA,EACL,OAAO,GAIf,OAAO,cAAC,EAAD,CAAW5B,WAAYA,KC9EnB,G,MAAA,WACb,OACE,sBAAKP,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,SCISoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c2695243.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nexport default () =>\r\n    <header>\r\n        <h1>Conway's Game of Life</h1>\r\n        <div className=\"nav-wrapper\">\r\n            <nav>\r\n                <ul>\r\n                    <li><button>play</button></li>\r\n                    <li><button>pause</button></li>\r\n                    <li><button>reset</button></li>\r\n                </ul>\r\n            </nav>\r\n        </div>\r\n    </header>","import React from \"react\";\r\nimport \"./Cell.css\";\r\n\r\nexport default ({ row, column, isAlive }) =>\r\n    <div className=\"cell\" id={`cell-${row}-${column}`} style={{\r\n        backgroundColor: isAlive ? \"lightgray\" : \"lightslategray\"\r\n    }} />","import React from \"react\";\r\nimport Cell from \"../Cell/Cell\";\r\nimport \"./Gameboard.css\";\r\n\r\nexport default ({ cellMatrix }) =>\r\n    <div id=\"gameboard\">\r\n        { cellMatrix ?\r\n            cellMatrix.map( (row, rowIndex) =>\r\n                row.map( (cell, columnIndex) =>\r\n                    <Cell column={columnIndex} row={rowIndex} isAlive={cell} />\r\n            ))\r\n            :\r\n            <></>\r\n        }\r\n    </div>","import React, { useState, useEffect } from \"react\";\r\nimport Gameboard from \"./Gameboard\";\r\n\r\nexport const GameboardContainer = () => {\r\n    const [ cellMatrix, setCellMatrix ] = useState(\r\n        Array(64).fill().map(x => Array(64).fill(false))\r\n    );\r\n    \r\n    // set initial state of cellMatrix\r\n    useEffect( () => {\r\n        let newCellMatrix = Array(64).fill().map((x,i) => cellMatrix[i]);\r\n        for ( let i = 0; i < cellMatrix.length ; i++ ) {\r\n            for ( let j = 0; j < cellMatrix[i].length; j++ ) {\r\n                newCellMatrix[i][j] = Math.random() < 0.08;\r\n            }\r\n        }\r\n    }\r\n    ,[]);\r\n    \r\n    // update cellMatrix\r\n    useEffect(() => {\r\n        const interval = setInterval( () => {\r\n            let newCellMatrix = Array(64).fill().map((x,i) => cellMatrix[i]);\r\n            for ( let i = 0; i < cellMatrix.length ; i++ ) {\r\n                for ( let j = 0; j < cellMatrix[i].length; j++ ) {\r\n                    newCellMatrix[i][j] = willSurvive(i,j);\r\n                }\r\n            }\r\n            setCellMatrix(newCellMatrix);\r\n        }, 100);\r\n        return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const mod = (n, m) => {\r\n        return ((n % m) + m) % m;\r\n    }\r\n\r\n    // get the state of a specified cell\r\n    const getCell = (row,column) => {\r\n        // no wrap\r\n        // return cellMatrix[row] && cellMatrix[row][column] || false;\r\n\r\n        // toroidal\r\n        let modRow = mod(row, cellMatrix.length);\r\n        let modColumn = mod(column, cellMatrix[modRow].length);\r\n        return cellMatrix[modRow][modColumn];\r\n    }\r\n\r\n    // will this cell survive this round?\r\n    const willSurvive = (row, column) => {\r\n        // count this cell's neightbors\r\n        let neighborCount = 0;\r\n        if (getCell(row - 1, column - 1)) neighborCount++;\r\n        if (getCell(row - 1, column)) neighborCount++;\r\n        if (getCell(row - 1, column + 1)) neighborCount++;\r\n        if (getCell(row, column - 1)) neighborCount++;\r\n        if (getCell(row, column + 1)) neighborCount++;\r\n        if (getCell(row + 1, column - 1)) neighborCount++;\r\n        if (getCell(row + 1, column)) neighborCount++;\r\n        if (getCell(row + 1, column + 1)) neighborCount++;\r\n        \r\n        // if this cell is alive\r\n        if (cellMatrix[row][column]) {\r\n            // starvation\r\n            if (neighborCount < 2) {\r\n                return false;\r\n            }\r\n            // stasis\r\n            else if (neighborCount === 2 || neighborCount === 3) {\r\n                return true;\r\n            }\r\n            // overpopulation\r\n            else if (neighborCount > 3) {\r\n                return false;\r\n            }\r\n        }\r\n        // reproduction\r\n        else if (neighborCount === 3) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return <Gameboard cellMatrix={cellMatrix} />;\r\n}","import Header from \"./Components/Header/Header\";\nimport { GameboardContainer as Gameboard } from \"./Components/Gameboard/Gameboard.container\";\nimport \"./App.css\";\n\nexport default () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Gameboard />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}